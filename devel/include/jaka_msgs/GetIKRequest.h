// Generated by gencpp from file jaka_msgs/GetIKRequest.msg
// DO NOT EDIT!


#ifndef JAKA_MSGS_MESSAGE_GETIKREQUEST_H
#define JAKA_MSGS_MESSAGE_GETIKREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jaka_msgs
{
template <class ContainerAllocator>
struct GetIKRequest_
{
  typedef GetIKRequest_<ContainerAllocator> Type;

  GetIKRequest_()
    : ref_joint()
    , cartesian_pose()  {
    }
  GetIKRequest_(const ContainerAllocator& _alloc)
    : ref_joint(_alloc)
    , cartesian_pose(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _ref_joint_type;
  _ref_joint_type ref_joint;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _cartesian_pose_type;
  _cartesian_pose_type cartesian_pose;





  typedef boost::shared_ptr< ::jaka_msgs::GetIKRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jaka_msgs::GetIKRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetIKRequest_

typedef ::jaka_msgs::GetIKRequest_<std::allocator<void> > GetIKRequest;

typedef boost::shared_ptr< ::jaka_msgs::GetIKRequest > GetIKRequestPtr;
typedef boost::shared_ptr< ::jaka_msgs::GetIKRequest const> GetIKRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jaka_msgs::GetIKRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jaka_msgs::GetIKRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jaka_msgs::GetIKRequest_<ContainerAllocator1> & lhs, const ::jaka_msgs::GetIKRequest_<ContainerAllocator2> & rhs)
{
  return lhs.ref_joint == rhs.ref_joint &&
    lhs.cartesian_pose == rhs.cartesian_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jaka_msgs::GetIKRequest_<ContainerAllocator1> & lhs, const ::jaka_msgs::GetIKRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jaka_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jaka_msgs::GetIKRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jaka_msgs::GetIKRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jaka_msgs::GetIKRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jaka_msgs::GetIKRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jaka_msgs::GetIKRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jaka_msgs::GetIKRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jaka_msgs::GetIKRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1002dcf61aae9f2dccba986ca3669d83";
  }

  static const char* value(const ::jaka_msgs::GetIKRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1002dcf61aae9f2dULL;
  static const uint64_t static_value2 = 0xccba986ca3669d83ULL;
};

template<class ContainerAllocator>
struct DataType< ::jaka_msgs::GetIKRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jaka_msgs/GetIKRequest";
  }

  static const char* value(const ::jaka_msgs::GetIKRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jaka_msgs::GetIKRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] ref_joint\n"
"float32[] cartesian_pose\n"
"\n"
;
  }

  static const char* value(const ::jaka_msgs::GetIKRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jaka_msgs::GetIKRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ref_joint);
      stream.next(m.cartesian_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetIKRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jaka_msgs::GetIKRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jaka_msgs::GetIKRequest_<ContainerAllocator>& v)
  {
    s << indent << "ref_joint[]" << std::endl;
    for (size_t i = 0; i < v.ref_joint.size(); ++i)
    {
      s << indent << "  ref_joint[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ref_joint[i]);
    }
    s << indent << "cartesian_pose[]" << std::endl;
    for (size_t i = 0; i < v.cartesian_pose.size(); ++i)
    {
      s << indent << "  cartesian_pose[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cartesian_pose[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // JAKA_MSGS_MESSAGE_GETIKREQUEST_H
