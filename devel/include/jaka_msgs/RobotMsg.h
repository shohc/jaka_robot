// Generated by gencpp from file jaka_msgs/RobotMsg.msg
// DO NOT EDIT!


#ifndef JAKA_MSGS_MESSAGE_ROBOTMSG_H
#define JAKA_MSGS_MESSAGE_ROBOTMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jaka_msgs
{
template <class ContainerAllocator>
struct RobotMsg_
{
  typedef RobotMsg_<ContainerAllocator> Type;

  RobotMsg_()
    : motion_state(0)
    , power_state(0)
    , servo_state(0)
    , collision_state(0)  {
    }
  RobotMsg_(const ContainerAllocator& _alloc)
    : motion_state(0)
    , power_state(0)
    , servo_state(0)
    , collision_state(0)  {
  (void)_alloc;
    }



   typedef int16_t _motion_state_type;
  _motion_state_type motion_state;

   typedef int16_t _power_state_type;
  _power_state_type power_state;

   typedef int16_t _servo_state_type;
  _servo_state_type servo_state;

   typedef int16_t _collision_state_type;
  _collision_state_type collision_state;





  typedef boost::shared_ptr< ::jaka_msgs::RobotMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jaka_msgs::RobotMsg_<ContainerAllocator> const> ConstPtr;

}; // struct RobotMsg_

typedef ::jaka_msgs::RobotMsg_<std::allocator<void> > RobotMsg;

typedef boost::shared_ptr< ::jaka_msgs::RobotMsg > RobotMsgPtr;
typedef boost::shared_ptr< ::jaka_msgs::RobotMsg const> RobotMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jaka_msgs::RobotMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jaka_msgs::RobotMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jaka_msgs::RobotMsg_<ContainerAllocator1> & lhs, const ::jaka_msgs::RobotMsg_<ContainerAllocator2> & rhs)
{
  return lhs.motion_state == rhs.motion_state &&
    lhs.power_state == rhs.power_state &&
    lhs.servo_state == rhs.servo_state &&
    lhs.collision_state == rhs.collision_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jaka_msgs::RobotMsg_<ContainerAllocator1> & lhs, const ::jaka_msgs::RobotMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jaka_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jaka_msgs::RobotMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jaka_msgs::RobotMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jaka_msgs::RobotMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jaka_msgs::RobotMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jaka_msgs::RobotMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jaka_msgs::RobotMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jaka_msgs::RobotMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cb4726a69178af69dc31d5013f095556";
  }

  static const char* value(const ::jaka_msgs::RobotMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcb4726a69178af69ULL;
  static const uint64_t static_value2 = 0xdc31d5013f095556ULL;
};

template<class ContainerAllocator>
struct DataType< ::jaka_msgs::RobotMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jaka_msgs/RobotMsg";
  }

  static const char* value(const ::jaka_msgs::RobotMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jaka_msgs::RobotMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 motion_state\n"
"int16 power_state\n"
"int16 servo_state\n"
"int16 collision_state\n"
;
  }

  static const char* value(const ::jaka_msgs::RobotMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jaka_msgs::RobotMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motion_state);
      stream.next(m.power_state);
      stream.next(m.servo_state);
      stream.next(m.collision_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jaka_msgs::RobotMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jaka_msgs::RobotMsg_<ContainerAllocator>& v)
  {
    s << indent << "motion_state: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motion_state);
    s << indent << "power_state: ";
    Printer<int16_t>::stream(s, indent + "  ", v.power_state);
    s << indent << "servo_state: ";
    Printer<int16_t>::stream(s, indent + "  ", v.servo_state);
    s << indent << "collision_state: ";
    Printer<int16_t>::stream(s, indent + "  ", v.collision_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JAKA_MSGS_MESSAGE_ROBOTMSG_H
