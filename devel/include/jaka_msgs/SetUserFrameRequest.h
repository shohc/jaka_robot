// Generated by gencpp from file jaka_msgs/SetUserFrameRequest.msg
// DO NOT EDIT!


#ifndef JAKA_MSGS_MESSAGE_SETUSERFRAMEREQUEST_H
#define JAKA_MSGS_MESSAGE_SETUSERFRAMEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jaka_msgs
{
template <class ContainerAllocator>
struct SetUserFrameRequest_
{
  typedef SetUserFrameRequest_<ContainerAllocator> Type;

  SetUserFrameRequest_()
    : pose()
    , user_num(0)  {
    }
  SetUserFrameRequest_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , user_num(0)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pose_type;
  _pose_type pose;

   typedef int16_t _user_num_type;
  _user_num_type user_num;





  typedef boost::shared_ptr< ::jaka_msgs::SetUserFrameRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jaka_msgs::SetUserFrameRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetUserFrameRequest_

typedef ::jaka_msgs::SetUserFrameRequest_<std::allocator<void> > SetUserFrameRequest;

typedef boost::shared_ptr< ::jaka_msgs::SetUserFrameRequest > SetUserFrameRequestPtr;
typedef boost::shared_ptr< ::jaka_msgs::SetUserFrameRequest const> SetUserFrameRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jaka_msgs::SetUserFrameRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jaka_msgs::SetUserFrameRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jaka_msgs::SetUserFrameRequest_<ContainerAllocator1> & lhs, const ::jaka_msgs::SetUserFrameRequest_<ContainerAllocator2> & rhs)
{
  return lhs.pose == rhs.pose &&
    lhs.user_num == rhs.user_num;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jaka_msgs::SetUserFrameRequest_<ContainerAllocator1> & lhs, const ::jaka_msgs::SetUserFrameRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jaka_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jaka_msgs::SetUserFrameRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jaka_msgs::SetUserFrameRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jaka_msgs::SetUserFrameRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jaka_msgs::SetUserFrameRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jaka_msgs::SetUserFrameRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jaka_msgs::SetUserFrameRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jaka_msgs::SetUserFrameRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4b6a900a46b142e04bf4c00d1a02e35d";
  }

  static const char* value(const ::jaka_msgs::SetUserFrameRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4b6a900a46b142e0ULL;
  static const uint64_t static_value2 = 0x4bf4c00d1a02e35dULL;
};

template<class ContainerAllocator>
struct DataType< ::jaka_msgs::SetUserFrameRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jaka_msgs/SetUserFrameRequest";
  }

  static const char* value(const ::jaka_msgs::SetUserFrameRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jaka_msgs::SetUserFrameRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] pose\n"
"int16 user_num\n"
"\n"
;
  }

  static const char* value(const ::jaka_msgs::SetUserFrameRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jaka_msgs::SetUserFrameRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.user_num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetUserFrameRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jaka_msgs::SetUserFrameRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jaka_msgs::SetUserFrameRequest_<ContainerAllocator>& v)
  {
    s << indent << "pose[]" << std::endl;
    for (size_t i = 0; i < v.pose.size(); ++i)
    {
      s << indent << "  pose[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pose[i]);
    }
    s << indent << "user_num: ";
    Printer<int16_t>::stream(s, indent + "  ", v.user_num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JAKA_MSGS_MESSAGE_SETUSERFRAMEREQUEST_H
