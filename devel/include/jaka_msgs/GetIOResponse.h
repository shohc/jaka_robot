// Generated by gencpp from file jaka_msgs/GetIOResponse.msg
// DO NOT EDIT!


#ifndef JAKA_MSGS_MESSAGE_GETIORESPONSE_H
#define JAKA_MSGS_MESSAGE_GETIORESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jaka_msgs
{
template <class ContainerAllocator>
struct GetIOResponse_
{
  typedef GetIOResponse_<ContainerAllocator> Type;

  GetIOResponse_()
    : value(0.0)
    , message()  {
    }
  GetIOResponse_(const ContainerAllocator& _alloc)
    : value(0.0)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef float _value_type;
  _value_type value;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;





  typedef boost::shared_ptr< ::jaka_msgs::GetIOResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jaka_msgs::GetIOResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetIOResponse_

typedef ::jaka_msgs::GetIOResponse_<std::allocator<void> > GetIOResponse;

typedef boost::shared_ptr< ::jaka_msgs::GetIOResponse > GetIOResponsePtr;
typedef boost::shared_ptr< ::jaka_msgs::GetIOResponse const> GetIOResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jaka_msgs::GetIOResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jaka_msgs::GetIOResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jaka_msgs::GetIOResponse_<ContainerAllocator1> & lhs, const ::jaka_msgs::GetIOResponse_<ContainerAllocator2> & rhs)
{
  return lhs.value == rhs.value &&
    lhs.message == rhs.message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jaka_msgs::GetIOResponse_<ContainerAllocator1> & lhs, const ::jaka_msgs::GetIOResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jaka_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jaka_msgs::GetIOResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jaka_msgs::GetIOResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jaka_msgs::GetIOResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jaka_msgs::GetIOResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jaka_msgs::GetIOResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jaka_msgs::GetIOResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jaka_msgs::GetIOResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0b4c2d4b84b17860a96271a9dcc03cf1";
  }

  static const char* value(const ::jaka_msgs::GetIOResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0b4c2d4b84b17860ULL;
  static const uint64_t static_value2 = 0xa96271a9dcc03cf1ULL;
};

template<class ContainerAllocator>
struct DataType< ::jaka_msgs::GetIOResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jaka_msgs/GetIOResponse";
  }

  static const char* value(const ::jaka_msgs::GetIOResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jaka_msgs::GetIOResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float32 value\n"
"string message\n"
;
  }

  static const char* value(const ::jaka_msgs::GetIOResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jaka_msgs::GetIOResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.value);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetIOResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jaka_msgs::GetIOResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jaka_msgs::GetIOResponse_<ContainerAllocator>& v)
  {
    s << indent << "value: ";
    Printer<float>::stream(s, indent + "  ", v.value);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JAKA_MSGS_MESSAGE_GETIORESPONSE_H
