// Generated by gencpp from file jaka_msgs/GetIORequest.msg
// DO NOT EDIT!


#ifndef JAKA_MSGS_MESSAGE_GETIOREQUEST_H
#define JAKA_MSGS_MESSAGE_GETIOREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jaka_msgs
{
template <class ContainerAllocator>
struct GetIORequest_
{
  typedef GetIORequest_<ContainerAllocator> Type;

  GetIORequest_()
    : signal()
    , path(0)
    , type(0)
    , index(0)  {
    }
  GetIORequest_(const ContainerAllocator& _alloc)
    : signal(_alloc)
    , path(0)
    , type(0)
    , index(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _signal_type;
  _signal_type signal;

   typedef int16_t _path_type;
  _path_type path;

   typedef int16_t _type_type;
  _type_type type;

   typedef int16_t _index_type;
  _index_type index;





  typedef boost::shared_ptr< ::jaka_msgs::GetIORequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jaka_msgs::GetIORequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetIORequest_

typedef ::jaka_msgs::GetIORequest_<std::allocator<void> > GetIORequest;

typedef boost::shared_ptr< ::jaka_msgs::GetIORequest > GetIORequestPtr;
typedef boost::shared_ptr< ::jaka_msgs::GetIORequest const> GetIORequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jaka_msgs::GetIORequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jaka_msgs::GetIORequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jaka_msgs::GetIORequest_<ContainerAllocator1> & lhs, const ::jaka_msgs::GetIORequest_<ContainerAllocator2> & rhs)
{
  return lhs.signal == rhs.signal &&
    lhs.path == rhs.path &&
    lhs.type == rhs.type &&
    lhs.index == rhs.index;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jaka_msgs::GetIORequest_<ContainerAllocator1> & lhs, const ::jaka_msgs::GetIORequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jaka_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jaka_msgs::GetIORequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jaka_msgs::GetIORequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jaka_msgs::GetIORequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jaka_msgs::GetIORequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jaka_msgs::GetIORequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jaka_msgs::GetIORequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jaka_msgs::GetIORequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9fb3a4539cc0eabc515d4abfbe16cb17";
  }

  static const char* value(const ::jaka_msgs::GetIORequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9fb3a4539cc0eabcULL;
  static const uint64_t static_value2 = 0x515d4abfbe16cb17ULL;
};

template<class ContainerAllocator>
struct DataType< ::jaka_msgs::GetIORequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jaka_msgs/GetIORequest";
  }

  static const char* value(const ::jaka_msgs::GetIORequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jaka_msgs::GetIORequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string signal\n"
"int16 path\n"
"int16 type\n"
"int16 index\n"
"\n"
;
  }

  static const char* value(const ::jaka_msgs::GetIORequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jaka_msgs::GetIORequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.signal);
      stream.next(m.path);
      stream.next(m.type);
      stream.next(m.index);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetIORequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jaka_msgs::GetIORequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jaka_msgs::GetIORequest_<ContainerAllocator>& v)
  {
    s << indent << "signal: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.signal);
    s << indent << "path: ";
    Printer<int16_t>::stream(s, indent + "  ", v.path);
    s << indent << "type: ";
    Printer<int16_t>::stream(s, indent + "  ", v.type);
    s << indent << "index: ";
    Printer<int16_t>::stream(s, indent + "  ", v.index);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JAKA_MSGS_MESSAGE_GETIOREQUEST_H
