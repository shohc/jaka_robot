// Generated by gencpp from file jaka_msgs/ServoMoveRequest.msg
// DO NOT EDIT!


#ifndef JAKA_MSGS_MESSAGE_SERVOMOVEREQUEST_H
#define JAKA_MSGS_MESSAGE_SERVOMOVEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jaka_msgs
{
template <class ContainerAllocator>
struct ServoMoveRequest_
{
  typedef ServoMoveRequest_<ContainerAllocator> Type;

  ServoMoveRequest_()
    : pose()
    , speed()  {
    }
  ServoMoveRequest_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , speed(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pose_type;
  _pose_type pose;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::jaka_msgs::ServoMoveRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jaka_msgs::ServoMoveRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ServoMoveRequest_

typedef ::jaka_msgs::ServoMoveRequest_<std::allocator<void> > ServoMoveRequest;

typedef boost::shared_ptr< ::jaka_msgs::ServoMoveRequest > ServoMoveRequestPtr;
typedef boost::shared_ptr< ::jaka_msgs::ServoMoveRequest const> ServoMoveRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jaka_msgs::ServoMoveRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jaka_msgs::ServoMoveRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jaka_msgs::ServoMoveRequest_<ContainerAllocator1> & lhs, const ::jaka_msgs::ServoMoveRequest_<ContainerAllocator2> & rhs)
{
  return lhs.pose == rhs.pose &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jaka_msgs::ServoMoveRequest_<ContainerAllocator1> & lhs, const ::jaka_msgs::ServoMoveRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jaka_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jaka_msgs::ServoMoveRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jaka_msgs::ServoMoveRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jaka_msgs::ServoMoveRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jaka_msgs::ServoMoveRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jaka_msgs::ServoMoveRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jaka_msgs::ServoMoveRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jaka_msgs::ServoMoveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0da71b9828204eece05ec950e45db9d9";
  }

  static const char* value(const ::jaka_msgs::ServoMoveRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0da71b9828204eecULL;
  static const uint64_t static_value2 = 0xe05ec950e45db9d9ULL;
};

template<class ContainerAllocator>
struct DataType< ::jaka_msgs::ServoMoveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jaka_msgs/ServoMoveRequest";
  }

  static const char* value(const ::jaka_msgs::ServoMoveRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jaka_msgs::ServoMoveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] pose\n"
"float32[] speed\n"
;
  }

  static const char* value(const ::jaka_msgs::ServoMoveRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jaka_msgs::ServoMoveRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ServoMoveRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jaka_msgs::ServoMoveRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jaka_msgs::ServoMoveRequest_<ContainerAllocator>& v)
  {
    s << indent << "pose[]" << std::endl;
    for (size_t i = 0; i < v.pose.size(); ++i)
    {
      s << indent << "  pose[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pose[i]);
    }
    s << indent << "speed[]" << std::endl;
    for (size_t i = 0; i < v.speed.size(); ++i)
    {
      s << indent << "  speed[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.speed[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // JAKA_MSGS_MESSAGE_SERVOMOVEREQUEST_H
